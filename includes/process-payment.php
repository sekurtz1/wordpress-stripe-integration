<?php

global $current_user;

function sktest_stripe_process_payment() {
	if ( isset( $_POST['action'] ) && $_POST['action'] == 'stripe' && wp_verify_nonce( $_POST['stripe_nonce'], 'stripe-nonce' ) ) {

		global $stripe_options;

		// load the stripe libraries
		if ( !class_exists( 'Stripe' ) )
			require_once STRIPE_BASE_DIR . '/lib/Stripe.php';


		// retrieve the token generated by stripe.js
		$token = $_POST['stripeToken'];

		// check if we are using test mode
		if ( isset( $stripe_options['test_mode'] ) && $stripe_options['test_mode'] ) {
			$secret_key = trim( $stripe_options['test_secret_key'] );
		} else {
			$secret_key = trim( $stripe_options['live_secret_key'] );
		}

		Stripe::setApiKey( $secret_key );

		

				if ( is_user_logged_in() ) {
					$customer_id = get_user_meta( get_current_user_id(), 'stripe_customer_id', true );
					
					if ($customer_id =='') {
						$customer_id = false;
					}
				}
				
				try {

				if ( $customer_id ) {

					// retrieve our customer from Stripe
					$cu = Stripe_Customer::retrieve( $customer_id );

					// update the customer's card info (in case it has changed )
					$cu->card = $token;

					// save everything
					$cu->save();
					
				} else {

					// create a new customer if our current user doesn't have one
					$customer = Stripe_Customer::create( array(
							'card' => $token,
							'email' => $user_email,
							'description' => 'New customer created when adding card'
						)
					);

					$customer_id = $customer->id;

					if ( is_user_logged_in () ) {
						update_user_meta( get_current_user_id(), 'stripe_customer_id', $customer_id );
						
					}
					
				}
				
								
				$user_meta_fields = array ( 'billing_address_1', 'billing_address_2', 'billing_city', 'billing_state', 									'billing_postcode');
				
				foreach($user_meta_fields as $user_meta_field){
						//echo "update_user_meta(".$user_id.", ".$user_meta_field.", ".$posted[$user_meta_field].");";
						update_user_meta(get_current_user_id(), $user_meta_field, sanitize_text_field( $_POST[$user_meta_field]));
						}
				
				if ( $customer_id ) {

					$charge = Stripe_Charge::create( array(
							'amount' => 100, // amount in cents
							'currency' => 'usd',
							'customer' => $customer_id,
							'capture' => false
						)
					);

				} else {
					// the customer wasn't found or created, throw an error
					throw new Exception( __( 'A customer could not be created, or no customer was found.', 'pippin' ) );
				}

				// redirect on successful update
				$redirect = add_query_arg( 'update', 'success', $_POST['redirect'] );

			} catch ( Exception $e ) {
				wp_die( $e );
				// redirect on failed payment
				$redirect = add_query_arg( 'update', 'failed', $_POST['redirect'] );
			}
		

		// redirect back to our previous page with the added query variable
		wp_redirect( $redirect ); exit;
	}
}
add_action( 'init', 'sktest_stripe_process_payment' );
